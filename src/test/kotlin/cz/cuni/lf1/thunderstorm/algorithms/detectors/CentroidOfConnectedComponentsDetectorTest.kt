package cz.cuni.lf1.thunderstorm.algorithms.detectors

import cz.cuni.lf1.thunderstorm.datastructures.GrayScaleImageImplIj
import cz.cuni.lf1.thunderstorm.datastructures.extensions.createGrayScaleImage
import cz.cuni.lf1.thunderstorm.datastructures.extensions.createMoleculeDetection
import cz.cuni.lf1.thunderstorm.parser.thresholding.FormulaThreshold
import cz.cuni.lf1.thunderstorm.test.assertListOfMoleculesEquals
import ij.process.FloatProcessor
import org.apache.commons.math3.util.MathUtils
import org.junit.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue

class CentroidOfConnectedComponentsDetectorTest {

    @Test
    fun testDetectMoleculeCandidates1() {
        val image = GrayScaleImageImplIj(FloatProcessor(arrayOf(  // transposed
                floatArrayOf(9f, 4f, 3f, 7f, 4f),
                floatArrayOf(4f, 6f, 7f, 2f, 4f),
                floatArrayOf(1f, 1f, 1f, 1f, 1f),
                floatArrayOf(2f, 3f, 5f, 6f, 8f),
                floatArrayOf(2f, 3f, 3f, 3f, 2f))))

        val expResult = listOf(
                createMoleculeDetection(0.5, 1.5, 7.0),
                createMoleculeDetection(3.0, 3.0, 6.0))

        val result = CentroidOfConnectedComponentsDetector(false, FormulaThreshold("5.0")).detect(image)
        assertListOfMoleculesEquals(expResult, result, 0.0)
    }

    @Test
    fun testDetectMoleculeCandidates2() {
        val image = GrayScaleImageImplIj(FloatProcessor(arrayOf(  // transposed
                floatArrayOf(3f, 5f, 3f, 1f, 3f, 5f, 3f),
                floatArrayOf(5f, 8f, 5f, 3f, 5f, 8f, 5f),
                floatArrayOf(3f, 5f, 3f, 1f, 3f, 5f, 3f))))

        val expResult = listOf(
                createMoleculeDetection(1.0, 1.0, 8.0),
                createMoleculeDetection(1.0, 5.0, 8.0))

        val result = CentroidOfConnectedComponentsDetector(true, FormulaThreshold("3.0")).detect(image)
        assertListOfMoleculesEquals(expResult, result, 0.0)
    }

    @Test
    fun testDetectMoleculeCandidates3() {
        val image = GrayScaleImageImplIj(FloatProcessor(arrayOf(  // transposed
                floatArrayOf(5f, 1f),
                floatArrayOf(1f, 5f))))

        val expResult = listOf(
                createMoleculeDetection(0.5, 0.5, 5.0))

        val result = CentroidOfConnectedComponentsDetector(false, FormulaThreshold("3.0")).detect(image)
        assertListOfMoleculesEquals(expResult, result, 0.0)
    }

    @Test
    fun testDetectMoleculeCandidates4() {
        // seven molecules close together that needs watershed segmentation to resolve them
        val image = createGrayScaleImage(arrayOf(
                arrayOf(70.0, 68.0, 67.0,  64.0,  61.0,  58.0,  55.0,  51.0,  49.0,  50.0,  51.0,  51.0,  52.0,  52.0,  51.0,  51.0,  54.0,  56.0,  54.0,  52.0,  52.0,  52.0,  51.0,  50.0,  50.0,  51.0,  51.0,  51.0,  52.0,  55.0,  58.0,  57.0,  53.0,  51.0,  52.0,  58.0,  63.0, 63.0, 64.0, 66.0),
                arrayOf(69.0, 65.0, 61.0,  56.0,  49.0,  43.0,  36.0,  31.0,  28.0,  28.0,  28.0,  27.0,  28.0,  30.0,  32.0,  32.0,  33.0,  32.0,  30.0,  28.0,  29.0,  29.0,  27.0,  28.0,  31.0,  32.0,  29.0,  27.0,  29.0,  33.0,  35.0,  35.0,  34.0,  35.0,  40.0,  46.0,  51.0, 55.0, 60.0, 66.0),
                arrayOf(64.0, 56.0, 49.0,  41.0,  35.0,  29.0,  20.0,  13.0,   8.0,   7.0,   7.0,   4.0,   4.0,   7.0,  10.0,  10.0,   8.0,   5.0,   3.0,   4.0,   6.0,   6.0,   4.0,   6.0,   9.0,   9.0,   5.0,   3.0,   5.0,   8.0,  10.0,  11.0,  14.0,  20.0,  27.0,  33.0,  38.0, 45.0, 55.0, 65.0),
                arrayOf(58.0, 47.0, 37.0,  34.0,  36.0,  37.0,  30.0,  17.0,   9.0,   9.0,  10.0,   7.0,   2.0,   3.0,   9.0,  12.0,   7.0,   1.0,   2.0,   8.0,  10.0,   6.0,   3.0,   7.0,  12.0,   9.0,   3.0,   2.0,   6.0,  10.0,   8.0,   8.0,  16.0,  29.0,  37.0,  36.0,  33.0, 36.0, 48.0, 61.0),
                arrayOf(54.0, 41.0, 35.0,  46.0,  70.0,  90.0,  86.0,  64.0,  50.0,  54.0,  61.0,  55.0,  42.0,  41.0,  55.0,  63.0,  53.0,  42.0,  47.0,  61.0,  63.0,  50.0,  43.0,  53.0,  63.0,  57.0,  44.0,  43.0,  55.0,  61.0,  54.0,  48.0,  62.0,  85.0,  91.0,  72.0,  48.0, 36.0, 42.0, 55.0),
                arrayOf(51.0, 39.0, 42.0,  75.0, 131.0, 175.0, 177.0, 145.0, 124.0, 134.0, 151.0, 142.0, 119.0, 117.0, 140.0, 153.0, 136.0, 117.0, 127.0, 150.0, 151.0, 127.0, 115.0, 133.0, 151.0, 142.0, 120.0, 119.0, 141.0, 152.0, 138.0, 125.0, 143.0, 176.0, 177.0, 134.0,  78.0, 42.0, 38.0, 49.0),
                arrayOf(49.0, 38.0, 48.0, 100.0, 182.0, 246.0, 253.0, 213.0, 186.0, 202.0, 226.0, 216.0, 186.0, 183.0, 212.0, 227.0, 205.0, 181.0, 192.0, 222.0, 223.0, 192.0, 176.0, 198.0, 223.0, 213.0, 185.0, 184.0, 213.0, 228.0, 208.0, 189.0, 211.0, 249.0, 246.0, 185.0, 103.0, 49.0, 35.0, 46.0),
                arrayOf(48.0, 37.0, 48.0, 100.0, 184.0, 249.0, 255.0, 214.0, 187.0, 204.0, 229.0, 219.0, 189.0, 187.0, 215.0, 229.0, 207.0, 183.0, 195.0, 224.0, 225.0, 194.0, 178.0, 201.0, 227.0, 217.0, 190.0, 189.0, 218.0, 231.0, 209.0, 190.0, 211.0, 250.0, 247.0, 186.0, 104.0, 49.0, 35.0, 46.0),
                arrayOf(51.0, 38.0, 41.0,  75.0, 135.0, 181.0, 181.0, 146.0, 123.0, 137.0, 157.0, 149.0, 127.0, 126.0, 147.0, 157.0, 140.0, 122.0, 132.0, 155.0, 154.0, 131.0, 120.0, 139.0, 158.0, 148.0, 126.0, 127.0, 150.0, 159.0, 141.0, 127.0, 144.0, 177.0, 180.0, 138.0,  80.0, 43.0, 38.0, 49.0),
                arrayOf(56.0, 43.0, 36.0,  46.0,  72.0,  93.0,  87.0,  61.0,  45.0,  53.0,  65.0,  60.0,  49.0,  49.0,  61.0,  66.0,  56.0,  46.0,  52.0,  64.0,  63.0,  50.0,  45.0,  57.0,  68.0,  60.0,  45.0,  46.0,  60.0,  67.0,  58.0,  50.0,  62.0,  85.0,  94.0,  76.0,  49.0, 36.0, 40.0, 52.0),
                arrayOf(59.0, 49.0, 38.0,  32.0,  34.0,  37.0,  30.0,  14.0,   4.0,   6.0,  11.0,   9.0,   5.0,   6.0,  11.0,  12.0,   8.0,   4.0,   5.0,   9.0,   9.0,   5.0,   4.0,  10.0,  14.0,   9.0,   1.0,   0.0,   7.0,  12.0,  11.0,   9.0,  16.0,  30.0,  40.0,  39.0,  34.0, 36.0, 45.0, 56.0),
                arrayOf(63.0, 55.0, 47.0,  39.0,  32.0,  27.0,  22.0,  14.0,   8.0,   7.0,   8.0,   7.0,   6.0,   6.0,   7.0,   6.0,   5.0,   3.0,   2.0,   3.0,   5.0,   7.0,   8.0,   9.0,   9.0,   6.0,   3.0,   2.0,   3.0,   7.0,   9.0,   9.0,  13.0,  21.0,  29.0,  34.0,  38.0, 44.0, 52.0, 61.0),
                arrayOf(67.0, 62.0, 58.0,  54.0,  48.0,  42.0,  40.0,  36.0,  33.0,  32.0,  33.0,  30.0,  28.0,  28.0,  28.0,  27.0,  26.0,  25.0,  24.0,  25.0,  29.0,  32.0,  33.0,  32.0,  30.0,  29.0,  28.0,  28.0,  26.0,  27.0,  29.0,  29.0,  31.0,  37.0,  42.0,  46.0,  50.0, 55.0, 60.0, 67.0),
                arrayOf(68.0, 65.0, 64.0,  64.0,  61.0,  59.0,  57.0,  56.0,  54.0,  54.0,  55.0,  51.0,  48.0,  49.0,  51.0,  51.0,  50.0,  48.0,  47.0,  50.0,  52.0,  53.0,  54.0,  53.0,  52.0,  51.0,  51.0,  52.0,  50.0,  48.0,  49.0,  50.0,  51.0,  54.0,  56.0,  58.0,  60.0, 63.0, 66.0, 69.0)))

        val result = CentroidOfConnectedComponentsDetector(true, FormulaThreshold("100.0")).detect(image)

        assertEquals(7, result.size)
        result.forEach { p ->
            val x = p.xPos.getValue()
            val y = p.yPos.getValue()

            MathUtils.checkFinite(x)
            MathUtils.checkFinite(y)

            assertTrue(x >=0 && x <= image.getWidth(), "in range")
            assertTrue(y >=0 && y <= image.getHeight(), "in range")
        }
    }

    @Test
    fun testDetectMoleculeCandidates5() {
        // seven molecules close together that needs watershed segmentation to resolve them
        val image = createGrayScaleImage(arrayOf(
                arrayOf( 0.099, -0.078, -0.256, -0.588, -0.937, -1.220, -1.613, -2.038, -2.245, -2.181, -2.034, -2.000, -1.962, -1.917, -2.040, -2.033, -1.682, -1.503, -1.758, -1.968, -1.909, -1.893, -2.025, -2.122, -2.126, -2.089, -2.057, -2.065, -1.972, -1.615, -1.292, -1.413, -1.820, -2.065, -1.880, -1.269, -0.739, -0.670, -0.620, -0.323),
                arrayOf(-0.063, -0.492, -0.937, -1.530, -2.219, -2.942, -3.713, -4.330, -4.631, -4.666, -4.657, -4.752, -4.675, -4.373, -4.245, -4.240, -4.133, -4.173, -4.456, -4.631, -4.573, -4.576, -4.700, -4.607, -4.300, -4.241, -4.525, -4.725, -4.538, -4.120, -3.851, -3.883, -3.989, -3.842, -3.299, -2.558, -1.996, -1.586, -0.989, -0.328),
                arrayOf(-0.610, -1.449, -2.311, -3.127, -3.833, -4.570, -5.501, -6.382, -6.878, -6.984, -7.056, -7.298, -7.350, -7.024, -6.718, -6.693, -6.893, -7.222, -7.447, -7.338, -7.108, -7.150, -7.307, -7.121, -6.750, -6.796, -7.255, -7.486, -7.225, -6.850, -6.670, -6.561, -6.218, -5.537, -4.735, -4.095, -3.561, -2.741, -1.541, -0.437),
                arrayOf(-1.253, -2.531, -3.593, -3.999, -3.742, -3.586, -4.396, -5.844, -6.763, -6.760, -6.628, -7.064, -7.636, -7.502, -6.752, -6.419, -7.000, -7.697, -7.600, -6.909, -6.629, -7.119, -7.467, -7.016, -6.482, -6.754, -7.480, -7.623, -7.078, -6.703, -6.873, -6.901, -5.990, -4.505, -3.642, -3.791, -4.127, -3.689, -2.353, -0.889),
                arrayOf(-1.721, -3.184, -3.809, -2.623,  0.104,  2.313,  1.892, -0.541, -2.164, -1.707, -0.884, -1.573, -3.077, -3.162, -1.546, -0.666, -1.837, -3.097, -2.454, -0.880, -0.725, -2.189, -2.936, -1.806, -0.656, -1.323, -2.817, -2.918, -1.583, -0.889, -1.735, -2.351, -0.818,  1.757,  2.422,  0.363, -2.431, -3.757, -3.081, -1.568),
                arrayOf(-2.010, -3.408, -3.058,  0.656,  6.966, 12.018, 12.202,  8.614,  6.166,  7.337,  9.220,  8.279,  5.664,  5.405,  8.020,  9.437,  7.506,  5.439,  6.555,  9.152,  9.211,  6.553,  5.238,  7.221,  9.300,  8.252,  5.741,  5.631,  8.082,  9.385,  7.748,  6.278,  8.373, 12.052, 12.214,  7.386,  0.988, -3.016, -3.534, -2.224),
                arrayOf(-2.294, -3.557, -2.327,  3.505, 12.716, 20.040, 20.722, 16.254, 13.200, 14.990, 17.722, 16.568, 13.170, 12.834, 16.100, 17.826, 15.326, 12.594, 13.934, 17.264, 17.340, 13.855, 12.053, 14.589, 17.418, 16.259, 13.123, 13.031, 16.275, 17.970, 15.697, 13.573, 16.000, 20.346, 20.017, 13.053,  3.853, -2.297, -3.811, -2.639),
                arrayOf(-2.423, -3.678, -2.429,  3.544, 12.947, 20.380, 21.002, 16.388, 13.310, 15.241, 18.065, 16.892, 13.550, 13.271, 16.427, 18.039, 15.538, 12.834, 14.192, 17.530, 17.611, 14.150, 12.357, 14.904, 17.788, 16.685, 13.607, 13.584, 16.818, 18.336, 15.853, 13.660, 16.079, 20.410, 20.130, 13.216,  3.972, -2.251, -3.808, -2.636),
                arrayOf(-2.048, -3.457, -3.193,  0.707,  7.403, 12.661, 12.624,  8.641,  6.144,  7.702,  9.903,  9.009,  6.549,  6.413,  8.757,  9.886,  7.959,  5.976,  7.120,  9.655,  9.621,  6.981,  5.744,  7.842, 10.030,  8.965,  6.482,  6.555,  9.092, 10.169,  8.172,  6.489,  8.482, 12.167, 12.504,  7.751,  1.196, -2.946, -3.553, -2.317),
                arrayOf(-1.472, -2.899, -3.754, -2.639,  0.323,  2.709,  2.020, -0.937, -2.697, -1.797, -0.501, -0.987, -2.280, -2.246, -0.893, -0.305, -1.454, -2.563, -1.887, -0.527, -0.652, -2.154, -2.730, -1.336, -0.083, -1.000, -2.671, -2.600, -1.023, -0.242, -1.214, -2.110, -0.808,  1.835,  2.789,  0.775, -2.265, -3.756, -3.243, -1.945),
                arrayOf(-1.121, -2.301, -3.528, -4.146, -3.920, -3.600, -4.395, -6.213, -7.386, -7.131, -6.603, -6.794, -7.219, -7.100, -6.566, -6.411, -6.920, -7.388, -7.217, -6.784, -6.795, -7.276, -7.400, -6.728, -6.222, -6.802, -7.729, -7.806, -7.061, -6.425, -6.512, -6.770, -6.054, -4.433, -3.310, -3.431, -3.962, -3.763, -2.735, -1.489),
                arrayOf(-0.743, -1.605, -2.520, -3.399, -4.211, -4.795, -5.347, -6.213, -6.932, -6.986, -6.849, -6.992, -7.135, -7.078, -7.045, -7.151, -7.285, -7.412, -7.527, -7.466, -7.230, -7.057, -6.955, -6.819, -6.807, -7.074, -7.445, -7.617, -7.420, -6.991, -6.757, -6.766, -6.393, -5.434, -4.502, -3.939, -3.482, -2.827, -1.901, -0.863),
                arrayOf(-0.283, -0.851, -1.294, -1.752, -2.421, -3.016, -3.329, -3.713, -4.128, -4.158, -4.108, -4.381, -4.644, -4.662, -4.691, -4.791, -4.847, -4.962, -5.096, -4.952, -4.555, -4.220, -4.099, -4.198, -4.419, -4.568, -4.593, -4.676, -4.813, -4.730, -4.520, -4.474, -4.284, -3.677, -3.054, -2.594, -2.120, -1.628, -1.019, -0.291),
                arrayOf(-0.121, -0.454, -0.556, -0.627, -0.898, -1.192, -1.314, -1.473, -1.692, -1.671, -1.645, -2.000, -2.344, -2.292, -2.092, -1.995, -2.103, -2.373, -2.451, -2.190, -1.902, -1.785, -1.744, -1.765, -1.925, -2.078, -2.020, -1.974, -2.213, -2.384, -2.238, -2.116, -2.000, -1.672, -1.427, -1.297, -1.028, -0.727, -0.393,  0.001)))

        val result = CentroidOfConnectedComponentsDetector(true, FormulaThreshold("2.0")).detect(image)

        assertEquals(7, result.size)
        result.forEach { p ->
            val x = p.xPos.getValue()
            val y = p.yPos.getValue()

            MathUtils.checkFinite(x)
            MathUtils.checkFinite(y)

            assertTrue(x >=0 && x <= image.getWidth(), "in range")
            assertTrue(y >=0 && y <= image.getHeight(), "in range")
        }
    }
}